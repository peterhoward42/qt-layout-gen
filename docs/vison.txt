Introduction
------------

Qt GUIs are laid out using a (topological) hierarchy of QLayouts and QWidgets.
Every widget has a layout. Every layout has children which can be
sub layouts or widgets. So the tree is a set of nested parent-child relationships.

The hierarchy structure is often dominated by these:

    o  Layouts
        o  QHBoxLayout
        o  QVBoxLayout
        o  QStackedLayout
    o  Widgets
        o  QSplitter    
        o  QTabWidget

And it takes quite a bit of code to build the entire layout hierarchy for an
app, which can be seriously fiddly, time consuming, difficult and error prone.
It's also not hugely easy to change later.

Of course you can use QtDesigner to make it easier. But this library offers a
more programmatic approach, with characteristics that are importantly
different from the QtDesigner approach.

This project is about having a software library that lets you express
arbitrarily complex hierarchies and/or sub hierarchies in plain text files,
using an exceptionally simple and brief format. The library aims to consume
the text files and build the layouts for you at RUNTIME automatically.

It has some aims that endeavour to make it practical:
    o  The least typing possible.
    o  Very simple to learn and use.
    o  Can be introduced incrementally and piecemeal to existing projects.
    o  Can make complete layouts, or sub layouts that you can incorporate into your existing layout code.
    o  Doesn't get in the way of any existing PyQt programming approaches
    o  Can use your custom defined widgets (and layouts) in the auto-generated layouts as well as
       auto generating the more common ones (like QHBoxLayout) for you.
    o  Doesn't require you to alter (or tag) your existing widget code for them to take part.
    o  Very clear error reporting and diagnostics.
    o  Allows you to put all your layout definitions either in a single file.

We are advocating a runtime solution over a code-generator for two reasons.
Firstly, because it preserves a single source of truth for the intent, and 
avoids bugs arising from stale generated code lying around. Secondly, it
produces live object references that you can use in the rest of your program, and
are hence in no way locked-in to this method for generating the GUI - you can
mix and match and introduce it incrementally to existing code.


