Introduction
------------

Qt GUIs are laid out using a (topological) hierarchy of QLayouts and QWidgets.
Every widget has a layout. Every layout has children which can be
sub layouts or widgets. So the tree is a set of nested parent-child relationships.

The hierarchy structure is often dominated by these:

    o  Layouts
        o  QHBoxLayout
        o  QVBoxLayout
        o  QStackedLayout
    o  Widgets
        o  QSplitter    
        o  QTabWidget

And it takes quite a bit of code to build the entire layout hierarchy for an
app, which can be seriously fiddly, time consuming, difficult and error prone.
It's also not hugely easy to change later.

Of course you can use QtDesigner to make it easier. But this library offers a
more programmatic approach, with characteristics that are importantly
different from the QtDesigner approach.

This project is about having a software library that lets you express
arbitrarily complex hierarchies and/or sub hierarchies in plain text files,
using an exceptionally simple and brief format. The library aims to consume
the text files and build the layouts for you at RUNTIME automatically.

It has some aims that endeavour to make it practical:
    o  The least typing possible.
    o  Very simple to learn and use.
    o  Can be introduced incrementally and piecemeal to existing projects.
    o  Can make complete layouts, or sub layouts that you can incorporate into your existing layout code.
    o  Doesn't get in the way of any existing PyQt programming approaches
    o  Can use your custom defined widgets (and layouts) in the auto-generated layouts as well as
       auto generating the more common ones (like QHBoxLayout) for you.
    o  Doesn't require you to alter (or tag) your existing widget code for them to take part.
    o  Very clear error reporting and diagnostics.
    o  Allows you to put all your layout definitions either in a single file, or to
       modularise it into smaller chunks in multiple files. Maybe one file per GUI section,
       or one per widget etc.
    o  Does not require you to think about what order you specify things in, in order
       to satisfy dependency relationships.
    o  Is not dependent in any way on how you organise or name your input files or how you
       divide the content up among them. (Also means you can change your mind and shuffle
       stuff around easily without creating extra work).

We are advocating a runtime solution over a code-generator for two reasons.
Firstly, because it preserves a single source of truth for the intent, and 
avoids bugs arising from stale generated code lying around. Secondly, it
produces live object references that you can use in the rest of your program, and
are hence in no way locked-in to this method for generating the GUI - you can
mix and match and introduce it incrementally to existing code.

About the Input Text
--------------------
Consider this fragment:

    VBOX:my_page          header_row    body            footer_row

It means - "make me a QVBoxLayout and call it 'my_page'. Then treat the things
on the right as children that should be added to the layout.

It expects the things on the right can be resolved to things on the left
somewhere else in the input. Like this fragment that defines what header_row means.

    HBOX:header_row       left_bit      middle_bit      right_bit

The left hand part always creates a QLayout or QWidget.

The right hand part mandates what should be added to it as children - and
comprises names of things which can be found (somewhere) on the left hand side.

You don't have to specify any children, which is useful for generating widgets at the
leaf-level (like QButtons, QLabel etc). You'll see how below.

You can put lots of these lines into a file and have the builder consume the
lot. The order of the lines doesn't matter. In fact you can split it over
multiple files to modularise it however you think fit, and give the builder a
whole directory to play with. The builder will consume all the files in the
directory and sub directories recursively.

The format can handle longer lists of children like this: (newlines are
not significant).

    VBOX:my_page          row_a         row_b           row_c
                          row_d         row_e           row_f
                          row_g         
    HBOX:row_a ... 

You can also pass it string literals from Python like this (below), which is
conventient to build layouts for simple widgets.

    layout = build_layout(
        """
        VBOX:my_page          header_row    body            footer_row
        HBOX:header_row       left_bit      middle_bit      right_bit
        """

The contract for the input is extremely simple - and is defined formally in the docs.
(Actually in the inputsplitter comments today).

What can it make (apart from QBoxLayouts)
-------------------------------------------------------
To complete the list of keywords you can use on the left, they are:

    VBOX, HBOX, STACK, TAB, SPLIT 

    (The last two of these are QWidgtet, not QLayouts.)

These are just short forms for the really common ones. You could have written this instead:

    QVBoxLayout:my_page          row_a         row_b           row_c

You can put the name of any Qt Widget or Layout - but it is up to you to
make sure that either it supports addWidget() or addLayout(), or to make sure you don't give it
any children. (You get nice error messages when you mess up).

This is how you add things like buttons and labels as suggested above:

        HBOX:header_row       left_bit      my_label      right_bit
        QLabel:my_label

The builder will have set the text for the QLabel in this case to 'my_label'.
It tries to do this for any parents that you haven't specified any children for.
It does it by calling setText() on the parent if the parent supports it; so it
will work for example on QLabel and QPushButton.

Accessing the components put into the layout
--------------------------------------------
You'll often need to access the components incorporated into the layout post
build.  So the builder exposes them like this:

    layouts_built.my_page or
    layouts_built.my_label

Note this implies all the names you use on the left hand side in your input 
text must be globally unique. The builder will tell you politely when this
is not so. This is unfortunate, but a deliberate trade-off. We could have
avoided the problem by exposing the components hierarchically:

    layouts_built.my_page.header_row

But that creates unecessary work later, if you decide to move things around in the hiearchy
- and we wanted to make sure that was easy to do.

Not just one big layout
-----------------------
Sometimes you'll want to get the builder to make a set of layouts and sub
layouts that you'll combine manually later. Particlarly when you're
introducing it incrementally to existing code.

You don't have to do anything extra to achieve this - the number of layouts
you get is defined by the connectivities you've specified in your input text.
If it all resolves to one big tree then you get one layout. If it resolves to
two seperate trees then you get two trees. You access them as described above:

    layouts_built.my_main_layout
    layouts_built.my_auxillary_layout

If you don't get what you expect, you can ask the builder to show you how it
traced out everything. This produced a string representation of the tree(s) it
deduced.

    layouts_built.get_layout_hierarchy_map()


Using widgets you made earlier (or layouts)
-------------------------------------------
Many custom widgets and layouts need to be constructed and instantiated by
hand. And when you're introducing the builder to existing code bases
incrementatlly, your program will likely want to instantiate some you created outside of
the builder, but then have the builder use them.

There is a way to specify on the left hand side, that the builder should go off and find
a pre-existing object that you've pre-instantiated somewhere
else in your program.

    Find:CustomLayout:my_page          header_row    body            footer_row

This behaviour kicks in when your left hand side starts with 'Find' and has
two colons in.
The builder will consider all the objects that are already instantiated in your
program which are of the CustomLayout class. It will then look for one that
you have referenced with a variable or attribute called 'my_page'. For example
Somewhere else in your program you wrote:

    my_page = CustomLayout(arg1, arg2, etc), or
    some_object.my_page = CustomLayout(arg1, arg2, etc), or

If more than one object qualifies - the builder will object politely.

Keywords for Children
----------------------
These exist so far just for one special case that is so completely
ubiquitous it merits it. Ie. you nearly always want to add a stretch item to a box layout
either at one end or the other, or somewhere in the middle of the children:

    HBOX:my_box   foo bar <> baz

The '<>' means put a stretch item here. If you use it on anything other than
HBOX or VBOX, the builder will complain.

How is input text parsed / what are the rules?
----------------------------------------------

See inputsplitter comments until they are more certain.
