o  Restart with new design
    o  TDD on simple api case to drive out core code flows
        *  Reconsider syntax to make it easier to just grab and go with less fussy parsing.
           And accomodate find idiom.
        *  Write up lexical parsing
        *  Fix up and simplify lexical parsing with less error detection.
        *  Ditch error handling strategy
        *  Separate InputTextRecord
        *  Separate filelocation
        *  Repair input splitter
        o  Resume parent maker
                    o  parent maker
                        *  recognizer
                        o  qword type
                            *  basics
                            o  needs a qapplication to prevent warnings
                        o  keyword type
                        o  discovery type
                        o  document parentmaker better
        o  more use of assert?
        o  ditch _ classes convention
        o  api
        o  layout maker (ditch class method too nasty) - do real work in constructor!!!
        o  Resume main flow
        o

    o  Housekeep redundant modules and tests


o  Remember to demand that children are not reused

--------------------------------------------------------
Exception handling
--------------------------------------------------------
Requirements
    o  It is a lib so must leave freedom of presentation to client.
    o  Nice if lib consumer only has to catch one type.
    o  Nice if exception gives narrative from developers pov about
       what went wrong.
    o  Which is input file oriented - they don't care about internal concepts.
    o  So what concepts should we expose?

    o  A couple of example error messages,

        Error: Cannot read this file filename

        Error: The first thing in a file must be a word with a colon in it: (filename/no)

        Error: Failed trying to import one of these <> from QtGui?. (filename/no)

    o  Architecture - just one Exception type with str message fully formed at bottom level whereever poss
       then need not catch!
